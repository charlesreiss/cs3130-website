---
title: Parallel Game of Life
author:
    - Charles Reiss
    - Luther Tychonievich
...

<div class="changelog">
Changelog:

*  30 October 2023: remove references to before 6 April versions of the skeleton code.
*  1 November 2023: add diagram of even/odd pattern to tips; divide tips into subsections
</div>

# Your Task

## Before you code

Examine the supplied [skeleton code](../files/life-c-skeleton.tar) *[last updated 2023-04-06 3:50pm]* which implements [Conway's Game of Life](https://en.wikipedia.org/wiki/Conway's_Game_of_Life).
You should only edit `life-parallel.c`, but that interacts with many other files in the package.

Make sure you look at `input/README.md`, as well as `life.h` and any other files you wish.

The provided code will compile and run.
We encourage experimenting with it before adding any code of your own.

Make sure you understand how `simulate_life_serial` works.
You'll be making a (more complicated) parallel version of this, and are unlikely to be successful if you don't understand this starting point.

## Implement parallel Life

Create a parallel version (using pthreads) in `life-parallel.c`.
You must use the provided header

````c
void simulate_life_parallel(int threads, LifeBoard *state, int steps)
````

`life-serial.c` contains a correct, working single-threaded implementation you are welcome to borrow from. 
You should write helper functions as appropriate to keep your code well-organized.


Additional constraints:

1. Your implementation must be correct (result in the expected final board configuration, matching the serial version) for all boards and iteration counts.

1. You must call `pthread_create` exactly `threads` times (assuming you are computing cell values only in new threads you create; if you also compute cell values in the main (initial) thread, call it `threads-1` times instead).
   Do not create more or fewer threads, nor create new threads for each iteration of the simulation.

1. We must be able to call `simulate_life_parallel` from multiple threads concurrently. Do not use global variables or other thread-unsafe practices.

1. You must have no memory leaks or other memory errors. The provided `Makefile` builds a version with the address sanitizer enabled automatically as `life-asan`; this must run without errors.

1. ThreadSanitizer should not detect likely race conditions or other thread API errors in your code. The provided `Makefile` builds a version with the thread sanitizer enabled automatically as `life-tsan`.

1. You must call the appropriate `pthread_***_destroy` for each `pthread_***_init` you call to reclaim any pthreads-allocated memory.
    
    1. On portal/our testing machines, `pthread_barrier_destroy` won't work properly unless called after _all_ `pthread_barrier_wait` calls have _returned_. (This is a bug in the pthread_barrier implementation on those machines.)

1. On a multi-core machine, your parallel code must be noticeably faster than the serial code when run on sufficiently large boards for sufficiently many iterations.

1. On sufficiently large boards (both enough rows and enough columns), you should split up the work roughly evenly between the threads. (With large sizes, no thread should end up doing more than a few percent more computations than another.)

1. And, of course, you are still bound by all the usual [course policies](policies.html#write-your-own-code).

1. You must not use OpenMP (subject of one of our labs) in your solution: we are trying to measure your understanding of the lower-level tools OpenMP uses.
    
## Test your code.

Uncomment the lines of `main.c` that are marked as appropriate to uncomment after `simulate_life_parallel` is written. Then test your code, as e.g. by running

- `./life`{.bash} to see the usage hints.

- `life-asan 10 input/make-a time`{.bash} to check for memory leaks and other memory errors (but do not trust its timing, the address sanitizer slows things down a lot).

- `life-tsan 10 input/make-a time`{.bash} to check for race conditions and some other types of synchornization errors (but do not trust its timing, the address sanitizer slows things down a lot).

    - if you get an error about a race condition with pthread_barrier_destroy and pthread_barrier_wait, see the first caveat below.

- `./life 0 input/o0075 serial-result`{.bash} to ensure you can load an example file.

- `./life 110 input/o0075 serial-result`{.bash} to ensure you can simulate an example file.

- `./life 10 input/make-a time`{.bash} to time the `make-a` file with 10 steps.

- `./time-examples.sh`{.bash} to get a sense of how you are doing on parallel performance.

- `./sanitizer-test.sh`{.bash} to try a bunch of sizes in AddressSanitizer, ThreadSanitizer

# Tips

## General strategy

1.
    This assignment was designed to be a natural fit for [barriers](../readings/pthreads.html#barrier). You are strongly encourage to get a barrier-based solution working first before attempting any other approaches.

1.
    You should choose some way to split up the grid between threads. You will get best performance if each thread works on a part of the grid that is contiguous in memory, so you get better locality within a thread. This also will avoid performance problems associated with two processors trying to modify data in different parts of the same cache block.

1.
    To compute the value of a cell in generation $i$, one needs the value of its neighbors in generation $i-1$. Barriers are one way to make sure that the values from generation $i-1$ are available before any thread starts computing generation $i$.

1.
    You should be able to reuse almost all of the `simulate_life_serial` code. You will probably need to split it into at least two functions — one that represents the work done in separate threads and one that spawns the threads and waits for them to finish.

1.
    If you find yourself tempted to use a global variable (such as a global mutex or barrier), you can usually get away with adding it as a field of a `struct` passed in by reference to your thread function's `void *` parameter instead.

## Understanding the swap and alternatives

1.
    The supplied code calls `LB_swap()` to exchange boards. This means that the values in `state` are used to set `next_state`, then `next_state` is swapped to become `state`. We can visualize
    this as follows:

    <img src="files/life-pattern-evenodd.svg" alt="diagram showing timeline with odd and even items, with operations using odd to set even, then using even to set odd" style="width: 10em">

    If one uses that code as is, one must ensure that all threads stop accessing the boards before the swap happens and don’t start accessing the boards again until the swap finishes. Otherwise,
    threads could read values from the wrong version of the board and/or write values to the wrong version of the board.

2.  An alternative, which calls wait on barriers fewer times each iteration, is to avoid swapping by having an “even” state and “odd” state and choose which board to write to based on the generation number. (In even iterations, threads would use the “odd” version of the state to write to the “even” state; and in odd iterations, threads would use the “even” version of the state to write to the “odd” state.) 
    This would result in a pattern that looks like this:
    
    <img src="files/life-pattern-evenodd.svg" alt="diagram showing timeline with odd and even items, with operations using odd to set even, then using even to set odd" style="width: 10em">

    In this way, rather than waiting for the swap to finish before starting the next generation, threads just need to wait for all other threads to have finished the current generation.
    As long as threads have finished the current iteration, the values needed to compute the next iteration will be available and in a consistent location.

## Debugging

1.  If your code hangs:

    *  you can run it in a debugger until it hangs, and then interrupt it (like with control-C) and examine where each thread is.

       For doing this in LLDB, see [their tutorial on examining thread state](https://lldb.llvm.org/use/tutorial.html#examining-thread-state).

       In GDB, you can use a command like `thread apply all backtrace` to get a backtrace from all threads, and `thread THREAD-ID` to switch to debugging the thread with a particular ID; see also [the manual for debugging with threads in GDB](https://sourceware.org/gdb/onlinedocs/gdb/Threads.html).

    *  several common mistakes with barriers that can cause hangs include:

       *  giving each thread its own copy of a barrier rather than having them share a single barrier (usually accessed using pointers);

       *  initializing a barrier with an incorrect thread count;

       *  destroying barriers while they are still in use;

       *  running into the issue with `pthread_barrier_destroy` mentioned in caveats;

# Caveats

-  The version of `pthread_barrier_destroy` on portal and our testing machines requires that you do not call pthread_barrier_destroy until you are sure that _all_ threads have first returned from `ptherad_barrier_wait`. This is a bug in the those machine's version of the `libc`, see [this mailing list post](https://sourceware.org/legacy-ml/libc-alpha/2015-07/msg00585.html).

- MacOS and OS X ship with only a subset of the pthreads library, notably excluding `pthread_barrier_t` and its associated functions.
    You should probably use portal, a virtual machine, etc.
