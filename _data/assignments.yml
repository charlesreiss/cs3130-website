- name: make
  lab: true
  page: labhw/make.html
  due: 2023-08-30
  submit_file: Makefile

- name: warmup
  open: 2023-08-29
  due: 2023-09-08
  page: labhw/warmup.html
  grade_describe: |
    When the output below indicates "not yet graded" that means your output did not match
    something the autograder recognized. Usually, this means something is wrong, but we
    will eventually have a human grader look at it to determine what to do.
  submit_files:
  - Makefile
  - makefile
  - main.c
  - split.c
  - split.h

- name: signal handling
  short_name: signal
  lab: true
  page: labhw/signals.html
  due: 2023-09-06
  submit_file: "*.c"

- name: permissions
  lab: true
  page: labhw/permissions.html
  comment: "also answer sheet on quiz system"
  comment: "should have random permission conversion problem generator"
  submit_file: permissions-lab.tar
  due: 2023-09-13

- name: timing
  due: 2023-09-16
  page: labhw/systiming.html
  grade_describe: |
    I expect this assignment to be mostly hand-graded (since a lot of it is hard to check automatically),
    so there will probably not that much useful automated output below.
  submit_files:
  - timings.txt
  - "*.txt"
  - "*.csv"
  - "*.c"
  - "*.h"
  - "*.s"
  - "*.S"
  - "*.asm"
  - "Makefile"

- name: pagetable part 1
  short_name: pagetable1
  comment: no introducing lab
  page: labhw/pagetable.html
  portion: 0.25
  due: 2023-09-22
  grade_describe: |
    Note that the results below include many tests which aren't part of the grade for part 1.
  submit_files:
  - "*.c"
  - "*.h"
  - "README"
  - "LICENSE"
  - "ACK*"
  - "Makefile"
  - "makefile"
  - "*.txt"
  - "*.gz"

- name: pagetable 2 (pre code review)
  short_name: pagetable2
  page: labhw/pagetable.html
  portion: 0.25
  due: 2023-10-04
  pre_lab: true
  no_late: true
  no-late: true
  due_message: pagetable part 2 (pre code review) due BEFORE FIRST LAB &mdash; normal late policy does not apply
  grade_describe: |
    Selected notes on interpreting our testing output below <small>(updated 1 Oct)</small>:
    <ul>
    <li>our tests use <tt>ptbr</tt> to inspect the page table contents and require the page table entries use the format specified in the assignment (including valid bits and the placement of physical page numbers)
    <li>note that the memory posix_memalign allocates may be initialized differently in our test environment than your environment (posix_memalign is not required to zero out the memory it returns)
    <li>tests that count allocations are looking to see if all allocations are accounted for by what's in the page table; there are separate tests that the correct page table entries were filled in
    <li>the expected results of tests of translate() are based on which page table entries map to valid allocations, so if page table entries are not formatted the way the tests expect (because of a problem with page_allocate()), they may "expect" translate() to return all 1's even though there's something in the page table entries
    </ul>
  XXXgrade_describe: |
    Selected notes on interpreting our testing output below:
    <ul>
    <li>the "reallocation" test calls page_allocate twice for the same address</li>
    <li>tests that count how many pages are allocated are counting calls to posix_memalign</li>
    <li>when looking for "allocated page table entries" or "non-allocated page table entries", the tests are looking at the indices it thinks should be allocated based on its calls to page_allocate(). So you could fail these tests both because of computing the indices wrong or because the page table entry content is not what we expect</li>
    <li>tests that check that allocations are "page sized" check both the total bytes allocated and that the allocation starts at the beginning of a page rather than spanning multiple pages</li>
    <li>some tests check that prior allocations still work (with translate()) after more calls to page_allocate() (for other pages)</li>
    <li>if the tests fail to completely run, this may be because the tests tried to dereference a value returned by translate() which was an invalid pointer, or because your code segfaulted. If you're worried that your code might segfault, I'd suggest using <a href="https://www.cs.virginia.edu/~jh2jf/courses/cs2130/fall2022/readings/memory.html#detecting-and-avoiding-bugs">AddressSanitizer</a> (along with your own tests) to try to find memory errors in your code. (AddressSanitizer can detect many errors consistently when they may only sometimes cause segfaults.)</li>
    <li>the "pre-allocate" tests call translate() before any calls to page_allocate</li>
    </ul>
  submit_files:
  - "*.c"
  - "*.h"
  - "README"
  - "LICENSE"
  - "ACK*"
  - "Makefile"
  - "makefile"
  - "*.txt"

- name: fork lab
  short_name: fork-lab
  lab: true
  page: labhw/fork-lab.html
  submit_files:
  - "my_system.c"
  - "*.c"
  due: 2023-09-27

- name: code reviews
  lab: true
  short_name: codereview
  page: labhw/code-review.html
  comments: needs submission site link correction
  missing-if-no-feedback: true
  due: 2023-10-04

- name: pagetable 3 (post code review)
  short_name: pagetable3
  comment: no introducing lab
  comment: connected to code review lab
  comment: manual page???
  comment: license stuf fhere
  comment: requires arbitrary multiple submission
  page: labhw/pagetable.html
  portion: 2.0
  due: 2023-10-06
  grade_describe: |
    Selected notes on interpreting our testing output below <small>(updated 1 Oct)</small>:
    <ul>
    <li>our tests use <tt>ptbr</tt> to inspect the page table contents and require the page table entries use the format specified in the assignment (including valid bits and the placement of physical page numbers)
    <li>note that the memory posix_memalign allocates may be initialized differently in our test environment than your environment (posix_memalign is not required to zero out the memory it returns)
    <li>tests that count allocations are looking to see if all allocations are accounted for by what's in the page table; there are separate tests that the correct page table entries were filled in
    <li>the expected results of tests of translate() are based on which page table entries map to valid allocations, so if page table entries are not formatted the way the tests expect (because of a problem with page_allocate()), they may "expect" translate() to return all 1's even though there's something in the page table entries
    </ul>
  XXXgrade_describe: |
    Selected notes on interpreting our testing output below:
    <ul>
    <li>the "reallocation" test calls page_allocate twice for the same address</li>
    <li>tests that count how many pages are allocated are counting calls to posix_memalign</li>
    <li>when looking for "allocated page table entries" or "non-allocated page table entries", the tests are looking at the indices it thinks should be allocated based on its calls to page_allocate(). So you could fail these tests both because of computing the indices wrong or because the page table entry content is not what we expect</li>
    <li>tests that check that allocations are "page sized" check both the total bytes allocated and that the allocation starts at the beginning of a page rather than spanning multiple pages</li>
    <li>some tests check that prior allocations still work (with translate()) after more calls to page_allocate() (for other pages)</li>
    <li>if the tests fail to completely run, this may be because the tests tried to dereference a value returned by translate() which was an invalid pointer, or because your code segfaulted. If you're worried that your code might segfault, I'd suggest using <a href="https://www.cs.virginia.edu/~jh2jf/courses/cs2130/fall2022/readings/memory.html#detecting-and-avoiding-bugs">AddressSanitizer</a> (along with your own tests) to try to find memory errors in your code. (AddressSanitizer can detect many errors consistently when they may only sometimes cause segfaults.)</li>
    <li>the "pre-allocate" tests call translate() before any calls to page_allocate</li>
    </ul>
  submit_files:
  - "*.c"
  - "*.h"
  - "README"
  - "LICENSE"
  - "ACK*"
  - "Makefile"
  - "makefile"
  - "*.txt"
  - "*.gz"

- name: cache exercises
  short_name: cachelab
  old_page: labhw/memoize.html
  page: labhw/cache-lab.html
  xxx-missing-if-no-feedback: true
  lab: true
  due: 2023-10-11


- name: fork HW
  short_name: fork
  comment: "FIXUP: missing HW?"
  comment: for pipelines? after covered in lecture?
  page: labhw/fork.html
  grade_describe: |
    If all tests fail/do not run, it may be because:
    <ul><li>you included a `main()` function that interferes with our testing code,
    <li>you did not define both `getoutput` and `parallelgetoutput` so our testing code will link successfully, or
    <li>your code crashes due to a memory error (see section 3.1 of the assignment for advice on checking for this locally)
    </ul>
  submit_file: "fork_run.c"
  due: 2023-10-13


- name: sync games
  lab: true
  short_name: sync
  page: labhw/sync.html
  comments: needs changes for in-person?
  comments: need .php stuff
  XXX-missing-if-no-feedback: true
  due: 2023-10-18

- name: cache programs
  short_name: cache-programs
  page: labhw/cache-programs.html
  submit_file: "*submit*.tar"
  due: 2023-10-20

- name: pthreads (dining philosophers) 
  lab: true
  short_name: pthreads
  page: labhw/dp.html
  tentative: true
  comments: needs changes for in-person
  comments: "FIXME: HAS TA CHECK OFF"
  comments: "FIXME: ThreadSanitizer"
  comments: "FIXME: needs more infrastructure for second optional approach"
  comments: "SHOULD HAVE ADDTL REQUIRED APPROACH"
  comments: "Non-DP example?"
  submit_files:
  - dp-arb.c
  - dp-rh.c
  - dp-mp.c
  due: 2023-10-25

- name: TLB
  short_name: tlb
  comment: no introducing lab
  page: labhw/tlb.html
  submit_files:
  - "*.c"
  - "*.h"
  - "Makefile"
  - "makefile"
  - "*.txt"
  due: 2023-10-27

- name: networking
  lab: true
  page: labhw/networking.html
  submit_file: "*.c"
  due: 2023-11-01
  tentative: true


- name: secure channels lab
  lab: true
  short_name: securechannel
  removed_page: labhw/signatures.html
  page: labhw/secure-channel.html
  due: 2023-11-08
  submit_file: attack.c
  tentative: true

- name: life
  short_name: life
  page: labhw/life.html
  due: 2023-11-10
  submit_file: "life-parallel.c"
  comment: may need skeleton code to be modified
  comment: adjust skeleton code to avoid workarounds
  comment: figure out SLURM setup
  comment: sanitize-examples.sh script
  comment: ThreadSanitizer stuff

- name: openmp
  short_name: openmp
  lab: true
  page: labhw/openmp.html
  submit_files:
  - "*.c"
  - "performance.txt"
  due: 2023-11-15
  tentative: true

- name: pipeline
  short_name: pipeline
  page: labhw/pipeline.html
  feedback: "extracted*,autograder*"
  missing-if-no-feedback: true
  due: 2023-11-17

- name: side channel
  short_name: side-channel
  lab: true
  page: labhw/side-channel.html
  submit_file: "lab.c"
  due: 2023-11-29

- name: C++ OR templates
  short_name: cpp
  lab: true
  page: labhw/cpp-choice.html
  submit_files:
  - "*.cpp"
  - "*.cc"
  - "*.h"
  - "*.hh"
  due: never
  no_assignments_json: true

- name: OOO
  short_name: OOO
  page: labhw/ooo-exercise.html
  due: 2023-12-01
  missing-if-no-feedback: true
  feedback: "extracted*,autograder*"
  no-late: true
  xxdue_message: OOO due <em>before lecture time</em>, late submissions <em>not normally accepted</em>
