- name: make
  lab: true
  page: labhw/make.html
  due: 2023-08-30
  submit_file: Makefile

- name: warmup
  open: 2023-08-29
  due: 2023-09-08
  page: labhw/warmup.html
  grade_describe: |
    When the output below indicates "not yet graded" that means your output did not match
    something the autograder recognized. Usually, this means something is wrong, but we
    will eventually have a human grader look at it to determine what to do.
  submit_files:
  - Makefile
  - makefile
  - main.c
  - split.c
  - split.h

- name: signal handling
  short_name: signal
  lab: true
  page: labhw/signals.html
  due: 2023-09-06
  submit_file: "*.c"

- name: permissions
  lab: true
  page: labhw/permissions.html
  comment: "also answer sheet on quiz system"
  comment: "should have random permission conversion problem generator"
  submit_file: permissions-lab.tar
  due: 2023-09-13

- name: timing
  due: 2023-09-15
  page: labhw/systiming.html
  grade_describe: |
    I expect this assignment to be mostly hand-graded (since a lot of it is hard to check automatically),
    so there will probably not that much useful automated output below.
  submit_files:
  - timings.txt
  - "*.txt"
  - "*.csv"
  - "*.c"
  - "*.h"
  - "*.s"
  - "*.S"
  - "*.asm"
  - "Makefile"

- name: networking
  lab: true
  page: labhw/networking.html
  submit_file: "*.c"
  due: 2023-09-20

- name: pagetable part 1
  short_name: pagetable1
  comment: no introducing lab
  page: labhw/pagetable.html
  portion: 0.25
  due: 2023-09-22
  XXXgrade_describe: |
    Selected notes on interpreting our testing output below:
    <ul>
    <li>the "reallocation" test calls page_allocate twice for the same address</li>
    <li>tests that count how many pages are allocated are counting calls to posix_memalign</li>
    <li>when looking for "allocated page table entries" or "non-allocated page table entries", the tests are looking at the indices it thinks should be allocated based on its calls to page_allocate(). So you could fail these tests both because of computing the indices wrong or because the page table entry content is not what we expect</li>
    <li>tests that check that allocations are "page sized" check both the total bytes allocated and that the allocation starts at the beginning of a page rather than spanning multiple pages</li>
    <li>some tests check that prior allocations still work (with translate()) after more calls to page_allocate() (for other pages)</li>
    <li>if the tests fail to completely run, this may be because the tests tried to dereference a value returned by translate() which was an invalid pointer, or because your code segfaulted. If you're worried that your code might segfault, I'd suggest using <a href="https://www.cs.virginia.edu/~jh2jf/courses/cs2130/fall2022/readings/memory.html#detecting-and-avoiding-bugs">AddressSanitizer</a> (along with your own tests) to try to find memory errors in your code. (AddressSanitizer can detect many errors consistently when they may only sometimes cause segfaults.)</li>
    <li>the "pre-allocate" tests call translate() before any calls to page_allocate</li>
    </ul>
  submit_files:
  - "*.c"
  - "*.h"
  - "README"
  - "LICENSE"
  - "ACK*"
  - "Makefile"
  - "makefile"
  - "*.txt"
  - "*.gz"

- name: pagetable 2 (pre code review)
  short_name: pagetable2
  page: labhw/pagetable.html
  portion: 0.25
  due: 2023-09-27
  XXXgrade_describe: |
    Selected notes on interpreting our testing output below:
    <ul>
    <li>the "reallocation" test calls page_allocate twice for the same address</li>
    <li>tests that count how many pages are allocated are counting calls to posix_memalign</li>
    <li>when looking for "allocated page table entries" or "non-allocated page table entries", the tests are looking at the indices it thinks should be allocated based on its calls to page_allocate(). So you could fail these tests both because of computing the indices wrong or because the page table entry content is not what we expect</li>
    <li>tests that check that allocations are "page sized" check both the total bytes allocated and that the allocation starts at the beginning of a page rather than spanning multiple pages</li>
    <li>some tests check that prior allocations still work (with translate()) after more calls to page_allocate() (for other pages)</li>
    <li>if the tests fail to completely run, this may be because the tests tried to dereference a value returned by translate() which was an invalid pointer, or because your code segfaulted. If you're worried that your code might segfault, I'd suggest using <a href="https://www.cs.virginia.edu/~jh2jf/courses/cs2130/fall2022/readings/memory.html#detecting-and-avoiding-bugs">AddressSanitizer</a> (along with your own tests) to try to find memory errors in your code. (AddressSanitizer can detect many errors consistently when they may only sometimes cause segfaults.)</li>
    <li>the "pre-allocate" tests call translate() before any calls to page_allocate</li>
    </ul>
  submit_files:
  - "*.c"
  - "*.h"
  - "README"
  - "LICENSE"
  - "ACK*"
  - "Makefile"
  - "makefile"
  - "*.txt"
  - "*.gz"

- name: code reviews
  lab: true
  short_name: codereview
  page: labhw/code-review.html
  comments: needs submission site link correction
  missing-if-no-feedback: true
  due: 2023-09-27

- name: pagetable 3 (post code review)
  short_name: pagetable3
  comment: no introducing lab
  comment: connected to code review lab
  comment: manual page???
  comment: license stuf fhere
  comment: requires arbitrary multiple submission
  page: labhw/pagetable.html
  portion: 2.0
  due: 2023-10-06
  XXXgrade_describe: |
    Selected notes on interpreting our testing output below:
    <ul>
    <li>the "reallocation" test calls page_allocate twice for the same address</li>
    <li>tests that count how many pages are allocated are counting calls to posix_memalign</li>
    <li>when looking for "allocated page table entries" or "non-allocated page table entries", the tests are looking at the indices it thinks should be allocated based on its calls to page_allocate(). So you could fail these tests both because of computing the indices wrong or because the page table entry content is not what we expect</li>
    <li>tests that check that allocations are "page sized" check both the total bytes allocated and that the allocation starts at the beginning of a page rather than spanning multiple pages</li>
    <li>some tests check that prior allocations still work (with translate()) after more calls to page_allocate() (for other pages)</li>
    <li>if the tests fail to completely run, this may be because the tests tried to dereference a value returned by translate() which was an invalid pointer, or because your code segfaulted. If you're worried that your code might segfault, I'd suggest using <a href="https://www.cs.virginia.edu/~jh2jf/courses/cs2130/fall2022/readings/memory.html#detecting-and-avoiding-bugs">AddressSanitizer</a> (along with your own tests) to try to find memory errors in your code. (AddressSanitizer can detect many errors consistently when they may only sometimes cause segfaults.)</li>
    <li>the "pre-allocate" tests call translate() before any calls to page_allocate</li>
    </ul>
  submit_files:
  - "*.c"
  - "*.h"
  - "README"
  - "LICENSE"
  - "ACK*"
  - "Makefile"
  - "makefile"
  - "*.txt"
  - "*.gz"

- name: secure channels lab
  lab: true
  short_name: securechannel
  removed_page: labhw/signatures.html
  page: labhw/secure-channel.html
  submit_file: attack.c
  due: 2023-10-04

- name: cache exercises
  short_name: cachelab
  old_page: labhw/memoize.html
  page: labhw/cache-lab.html
  missing-if-no-feedback: true
  lab: true
  due: 2023-10-11

- name: sync games
  lab: true
  short_name: sync
  page: labhw/sync.html
  comments: needs changes for in-person?
  comments: need .php stuff
  XXX-missing-if-no-feedback: true
  due: 2023-10-18

- name: cache programs
  short_name: cache-programs
  page: labhw/cache-programs.html
  submit_file: "*submit*.tar"
  due: 2023-10-20

- name: fork lab
  short_name: fork-lab
  lab: true
  page: labhw/fork-lab.html
  submit_file: "*.c"
  due: 2023-10-25

- name: TLB
  short_name: tlb
  comment: no introducing lab
  page: labhw/tlb.html
  submit_files:
  - "*.c"
  - "*.h"
  - "Makefile"
  - "makefile"
  - "*.txt"
  due: 2023-10-27

- name: pthreads (dining philosophers) 
  lab: true
  short_name: pthreads
  page: labhw/dp.html
  comments: needs changes for in-person
  comments: "FIXME: HAS TA CHECK OFF"
  comments: "FIXME: ThreadSanitizer"
  comments: "FIXME: needs more infrastructure for second optional approach"
  comments: "SHOULD HAVE ADDTL REQUIRED APPROACH"
  comments: "Non-DP example?"
  submit_files:
  - dp-arb.c
  - dp-rh.c
  - dp-mp.c
  due: 2023-11-01

- name: fork HW
  short_name: fork
  comment: "FIXUP: missing HW?"
  comment: for pipelines? after covered in lecture?
  page: labhw/fork.html
  grade_describe: |
    If all tests fail/do not run, it may be because you included a `main()` function that interferes with our testing code,
    or because you did not define both `getoutput` and `parallelgetoutput` so our testing code will link successfully.
  submit_file: "fork_run.c"
  due: 2023-11-03

- name: openmp
  short_name: openmp
  lab: true
  page: labhw/openmp.html
  submit_files:
  - "*.c"
  - "performance.txt"
  due: 2023-11-08

- name: side channel
  short_name: side-channel
  lab: true
  page: labhw/side-channel.html
  submit_file: "lab.c"
  due: 2023-11-15

- name: life
  short_name: life
  page: labhw/life.html
  due: 2023-11-17
  submit_file: "life-parallel.c"
  comment: may need skeleton code to be modified
  comment: adjust skeleton code to avoid workarounds
  comment: figure out SLURM setup
  comment: sanitize-examples.sh script
  comment: ThreadSanitizer stuff

- name: pipeline
  short_name: pipeline
  page: labhw/pipeline.html
  feedback: "extracted*,autograder*"
  missing-if-no-feedback: true
  grade_describe: |
    Between 30 April and midday 2 May, the autograder results failed to check
    the forwarding (and gave credit regardless of the answers). Hopefully,
    this is now corrected below.

    <small>Also before 7pm 2 May, the autogrades shown deducted credit for showing
    forwarding of the PC value for mispredicted jumps (which was not expected,
    but not intended to be a deduction).</small>
  due: 2023-11-28

- name: C++ OR templates
  short_name: cpp
  lab: true
  page: labhw/cpp-choice.html
  submit_files:
  - "*.cpp"
  - "*.cc"
  - "*.h"
  - "*.hh"
  due: 2023-11-29

- name: OOO
  short_name: OOO
  page: labhw/ooo-exercise.html
  due: 2023-12-05
  missing-if-no-feedback: true
  feedback: "extracted*,autograder*"
  no-late: true
  due_message: OOO due <em>before lecture time</em>, late submissions <em>not normally accepted</em>
