---
title: Computer Systems and Organization
author: Charles Reiss
index_title: Main/Readings
...

This is the website for the Spring 2024 offering of CS 3130.

You'll probably find the [schedule](schedule.html) link above most useful.

# Learning Outcomes

As a result of taking this course, you should learn

- core system architecture, including DMA, interrupts, and cache coherency
- real hardware, including concurrency complexities and what makes SPECTRE work
- concurrency, including synchronization, mutual exclusion, coherency, and concurrency bugs
- virtual memory, including process isolation and shared memory
- practical networking, including familiarity with TCP/IP, DNS, snooping, spoofing, and TLS
- security, including unix permissions, privilege escalation, and modern exploits
- ethical and legal issues, including reporting
- a build system and practical command-line tools

# Readings

We have created several writeups for this course:

- [CSO2 overview](readings/intro.html)
- Building
    - [Compilation and Libraries](readings/compilation.html)
    - [Makefiles](readings/make.html)
- [Kernels -- Software for the Hardware](readings/kernel.html)
  *  [Virtual Memory](readings/vm.html)
- [User Accounts](readings/accounts.html)
  *  [File Permissions](readings/permissions.html)
- [Buses (and networks)](readings/bus.html)
- [Networking Protocols](readings/protocols.html)
- [Cryptographic protocols](readings/sec.html)
- [Caches -- Keep a finger in it](readings/cache.html)
- [Processes and threads](readings/thread.html)
   *  [Synchronization primitives](readings/sync.html)
   *  [Using POSIX Threads](readings/pthreads.html)
   *  [Deadlock](readings/deadlock.html)
   *  [Consistency](readings/consistency.html)
- [Processors](readings/processors.html)

(The original version of these was written by Professor Tychonievich.)

We will augment these with various examples, online articles, and other resources.

## Environment for assignments

We will test your assignments on an environment similar to the department's Linux machines
that are accessible via SSH.

Unlike some offerings of CSO1, you are welcome to use an IDE of your choice (that doesn't write your code for you)
as long as your submission will work when we test it from a command line-like environment.

A lot of students have had success using VSCode and its SSH support to access the department machines, as is (for example)
described in [the Fall 2024 CSO1's first lab](https://researcher111.github.io/uva-cso1-F23-DG/labs/lab1-ssh-ed.html).
If using VSCode, you may find it helpful to install
the [C/C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)
and [Makefile](https://marketplace.visualstudio.com/items?itemName=ms-vscode.makefile-tools) extensions.

In addition, for accessing the department machines remotely, you may find these writeups helpful:

*  options for [using SSH and setting up keypairs to avoid retyping your password all the time](ssh.html)
*  instructions for [remote desktop access (via NoMachine)](https://www.cs.virginia.edu/wiki/lib/exe/fetch.php?media=nx-setup_v3a.pdf)

## Old quizzes/exams

On the [study materials link above](exams.html), you can find some old exams and quizzes.


# Getting Help

*  [Office hours](oh.html)

*  Piazza (linked off Collab site)

*  emailing me (not preferred)

# Course Staff

**Charles Reiss**
:   Office: Rice 205. 
    <br/>Email: creiss@virginia.edu
    <br/>Telephone: 434-924-8274
    <br/>Office Hours: (see [office hours](oh.html) page)

**TAs**
:   TBA

